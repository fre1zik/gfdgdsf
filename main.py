import sqlite3
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import InputReportReasonOther, InputReportReasonViolence, InputReportReasonPornography, \
    InputReportReasonChildAbuse, InputReportReasonIllegalDrugs, InputReportReasonPersonalDetails, InputReportReasonSpam
from re import compile as compile_link
from os import listdir


TOKEN = '8071415364:AAEENYsqgexU6UP97VefHdyxdJ2Nhw5akr8'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# ID —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞
SUPER_ADMIN_ID = 7030057590

# –ü—É—Ç—å –∫ —Å–µ—Å—Å–∏—è–º Telethon –∏ –¥–∞–Ω–Ω—ã–µ
path = "n3rz4/sessions/"  # –ü—É—Ç—å –∫ .session —Ñ–∞–π–ª–∞–º
api_id = 17243596  # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à api_id
api_hash = '6365cfa9acb2a8aa4cab9642d229f6e9'  # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à api_hash

conn = sqlite3.connect('subscriptions.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, subscription_end DATE)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS admins (id INTEGER PRIMARY KEY, level INTEGER)''')
conn.commit()
reasons = {
    "spam": InputReportReasonSpam(),
    "violence": InputReportReasonViolence(),
    "pornography": InputReportReasonPornography(),
    "child_abuse": InputReportReasonChildAbuse(),
    "illegal_drugs": InputReportReasonIllegalDrugs(),
    "personal_details": InputReportReasonPersonalDetails(),
    "other": InputReportReasonOther(),
}

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    username = message.from_user.username
    start_date = datetime.now().strftime('%Y-%m-%d')

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üò≥ –ö–∞–∫ —Å–Ω–æ—Å–∏—Ç—å?", callback_data='how_to_demolish'),
        InlineKeyboardButton("üòé –ü—Ä–∏—á–∏–Ω—ã –¥–ª—è —Å–Ω–æ—Å–∞", callback_data='reasons_to_demolish')
    )

    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!\n\nü§ñ –ë–æ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç {start_date}.\n\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'how_to_demolish' or c.data == 'reasons_to_demolish')
async def process_callback_button(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == 'how_to_demolish':
        with open('helpsnos.txt', 'r', encoding='utf-8') as file:
            text = file.read()
    elif data == 'reasons_to_demolish':
        with open('snoshelp.txt', 'r', encoding='utf-8') as file:
            text = file.read()

    await bot.send_message(callback_query.from_user.id, text)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def check_subscription(user_id):
    cursor.execute('SELECT subscription_end FROM users WHERE id = ?', (user_id,))
    result = cursor.fetchone()
    if result:
        subscription_end = datetime.strptime(result[0], '%Y-%m-%d')
        return subscription_end >= datetime.now()
    return False


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def check_admin_level(user_id, required_level):
    cursor.execute('SELECT level FROM admins WHERE id = ?', (user_id,))
    result = cursor.fetchone()
    if result:
        admin_level = result[0]
        return admin_level >= required_level
    return False


# –ö–æ–º–∞–Ω–¥–∞ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(commands=['addsub'])
async def add_subscription(message: types.Message):
    if check_admin_level(message.from_user.id, 1):
        args = message.text.split()
        if len(args) == 3:
            user_id = int(args[1])
            days = int(args[2])

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ 1 —É—Ä–æ–≤–Ω—è
            if check_admin_level(message.from_user.id, 1) and days > 10:
                await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–∞–∫—Å–∏–º—É–º –Ω–∞ 10 –¥–Ω–µ–π.")
                return

            subscription_end = datetime.now() + timedelta(days=days)
            cursor.execute("INSERT OR REPLACE INTO users (id, subscription_end) VALUES (?, ?)", (user_id, subscription_end.strftime('%Y-%m-%d')))
            conn.commit()
            await message.reply(f"–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ {days} –¥–Ω–µ–π.")
        else:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /addsub id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –ö–æ–º–∞–Ω–¥–∞ –≤—ã–¥–∞—á–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
@dp.message_handler(commands=['addadmin'])
async def add_admin(message: types.Message):
    if message.from_user.id == 7030057590:
        args = message.text.split()
        if len(args) == 3:
            user_id = int(args[1])
            level = int(args[2])
            if level in [1, 2]:
                cursor.execute("INSERT OR REPLACE INTO admins (id, level) VALUES (?, ?)", (user_id, level))
                conn.commit()
                await message.reply(f"–ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ —É—Ä–æ–≤–Ω—è {level} –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
            else:
                await message.reply("–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∏–ª–∏ 2.")
        else:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /addadmin id —É—Ä–æ–≤–µ–Ω—å")
    else:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã
@dp.message_handler(commands=['ss'])
async def ss_command(message: types.Message):
    if check_subscription(message.from_user.id):
        args = message.text.split(maxsplit=2)
        if len(args) == 3:
            reason_key = args[1].lower()
            link = args[2]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏—á–∏–Ω—ã –≤ —Å–ø–∏—Å–∫–µ
            if reason_key not in reasons:
                available_reasons = ", ".join(reasons.keys())
                await message.reply(
                    f"–ü—Ä–∏—á–∏–Ω–∞ '{reason_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: {available_reasons}."
                )
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—ã
            reason = reasons[reason_key]
            successful_reports, failed_reports = await report_message(link, message, reason)
            await message.reply(f"–ñ–∞–ª–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –£—Å–ø–µ—à–Ω—ã–µ: {successful_reports}, –û—à–∏–±–∫–∏: {failed_reports}")
        else:
            await message.reply(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /ss –ø—Ä–∏—á–∏–Ω–∞ —Å—Å—ã–ª–∫–∞\n\n"
                "–ü—Ä–∏–º–µ—Ä: /ss spam https://t.me/username/123"
            )
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

async def report_message(link: str, response_message: types.Message, reason) -> (int, int):
    successful_reports = 0
    failed_reports = 0

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏
    message_link_pattern = compile_link(r'https://t.me/(?P<username_or_chat>.+)/(?P<message_id>\d+)')
    match = message_link_pattern.search(link)

    if not match:
        await response_message.reply("–°—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: https://t.me/username/123")
        return successful_reports, failed_reports

    chat = match.group("username_or_chat")
    message_id = int(match.group("message_id"))
    sessions = [s for s in listdir(path) if s.endswith(".session")]

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å–µ—Å—Å–∏—è–º
    for session in sessions:
        try:
            async with TelegramClient(f"{path}{session}", api_id, api_hash) as client:
                if not await client.is_user_authorized():
                    logging.warning(f"–°–µ—Å—Å–∏—è {session} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞.")
                    failed_reports += 1
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                messages = await client.get_messages(chat, ids=message_id)
                if not messages:
                    logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ç–µ {chat}.")
                    failed_reports += 1
                    continue

                if messages.sender_id == 7030057590:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await response_message.reply(
                        "‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                    )
                    return successful_reports, failed_reports

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É
                entity = await client.get_entity(chat)
                await client(ReportRequest(
                    peer=entity,
                    id=[message_id],
                    reason=reason,
                    message="–ñ–∞–ª–æ–±–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–∏—á–∏–Ω–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
                ))
                successful_reports += 1

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –∂–∞–ª–æ–±
                logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∂–∞–ª–æ–±–∞ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é {session}.")

        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ {session}: {e}")
            failed_reports += 1

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await response_message.reply(
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω—ã—Ö –∂–∞–ª–æ–±: {successful_reports}, –æ—à–∏–±–æ–∫: {failed_reports}."
    )
    return successful_reports, failed_reports






async def send_report(session, chat, message_id, reason):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.

    :param session: –ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏.
    :param chat: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID —á–∞—Ç–∞.
    :param message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∂–∞–ª–æ–±—ã.
    :param reason: –ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã.
    :return: True, –µ—Å–ª–∏ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
    """
    async with TelegramClient(f"{path}{session}", api_id, api_hash) as client:
        if not await client.is_user_authorized():
            logging.warning(f"–°–µ—Å—Å–∏—è {session} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞.")
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await client.get_messages(chat, ids=message_id)
            if not messages:
                logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ç–µ {chat}.")
                return False

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É
            entity = await client.get_entity(chat)
            await client(ReportRequest(
                peer=entity,
                id=[message_id],
                reason=reason,
                message="–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ."
            ))
            logging.info(f"–ñ–∞–ª–æ–±–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
            return True

        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã —Å–µ—Å—Å–∏–∏ {session}: {e}")
            return False


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
